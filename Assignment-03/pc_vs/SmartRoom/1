#include <stdio.h>
#include <stdlib.h>

#include "iothub.h"
#include "iothub_device_client_ll.h"
#include "iothub_client_options.h"
#include "iothub_message.h"
#include "azure_c_shared_utility/threadapi.h"
#include "azure_c_shared_utility/shared_util_options.h"
#include "iothubtransportmqtt.h"
#include "parson.h"

class IoTHubClient {
public:
    IoTHubClient(const char* connectionString, IOTHUB_CLIENT_TRANSPORT_PROVIDER protocol) : 
        device_ll_handle(IoTHubDeviceClient_LL_CreateFromConnectionString(connectionString, protocol)),
        g_continueRunning(true), g_message_recv_count(0) {}

    ~IoTHubClient() {
        IoTHubDeviceClient_LL_Destroy(device_ll_handle);
        IoTHub_Deinit();
    }

    bool SendMessage(const char* msg) {
        bool result = false;
        IOTHUB_MESSAGE_HANDLE message_handle = IoTHubMessage_CreateFromString(msg);
        if (message_handle == NULL) {
            printf("Unable to create message handle.\n");
        }
        else {
            if (IoTHubDeviceClient_LL_SendEventAsync(device_ll_handle, message_handle, NULL, NULL) != IOTHUB_CLIENT_OK) {
                printf("Unable to send message.\n");
            }
            else {
                result = true;
            }
            IoTHubMessage_Destroy(message_handle);
        }
        return result;
    }

    void SetMessageCallback() {
        IoTHubDeviceClient_LL_SetMessageCallback(device_ll_handle, receive_msg_callback, this);
    }

    void Stop() {
        g_continueRunning = false;
    }

    size_t GetMessageCount() {
        return g_message_recv_count;
    }

private:
    IOTHUB_DEVICE_CLIENT_LL_HANDLE device_ll_handle;
    bool g_continueRunning;
    size_t g_message_recv_count;

    static IOTHUBMESSAGE_DISPOSITION_RESULT receive_msg_callback(IOTHUB_MESSAGE_HANDLE message, void* user_context) {
        IoTHubClient* client = (IoTHubClient*)user_context;

        const char* messageId;
        const char* correlationId;

        // Message properties
        if ((messageId = IoTHubMessage_GetMessageId(message)) == NULL)
        {
            messageId = "<unavailable>";
        }

        if ((correlationId = IoTHubMessage_GetCorrelationId(message)) == NULL)
        {
            correlationId = "<unavailable>";
        }

        IOTHUBMESSAGE_CONTENT_TYPE content_type = IoTHubMessage_GetContentType(message);
        if (content_type == IOTHUBMESSAGE_BYTEARRAY)
        {
            const unsigned char* buff_msg;
            size_t buff_len;

            if (IoTHubMessage_GetByteArray(message, &buff_msg, &buff_len) != IOTHUB_MESSAGE_OK)
            {
                (void)printf("Failure retrieving byte array message\r\n");
            }
            else
            {
                (void)printf("Received Binary message\r\nMessage ID: %s\r\n Correlation ID: %s\r\n Data: <<<%.*s>>> & Size=%d\r\n", messageId, correlationId, (int)buff_len, buff_msg, (int)buff_len);
            }
        }
        else
        {
            const char* string_msg = IoTHubMessage_GetString(message);
            if (string_msg == NULL)
            {
                (void)printf("Failure retrieving byte array message\r\n");
            }
            else
            {
                (void)printf("Received String Message\r\nMessage ID: %s\r\n Correlation
